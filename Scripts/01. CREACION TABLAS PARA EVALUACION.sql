-- CREACION DE TABLAS PARA EVALUACION

--CREACION TABLA POSTULANTE
CREATE TABLE postulante (
    "ID_POSTULANTE" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "DNI" VARCHAR(20) NOT NULL,
    "NOMBRE" VARCHAR(100) NOT NULL,
    "APELLIDO" VARCHAR(100) NOT NULL,
    "CORREO" VARCHAR(150) NOT NULL,
    "CELULAR" VARCHAR(20),
    "CODIGO_POSTULANTE" INTEGER,
    "ESTADO" BOOLEAN NOT NULL,
    "POSTULA_ACTIVO" BOOLEAN DEFAULT true,
    "POSTULA_FECHA_CREACION" TIMESTAMP DEFAULT now(),
    "POSTULA_USUARIO_CREACION" VARCHAR(45),
    "POSTULA_HOST_CREACION" VARCHAR(45),
    "POSTULA_FECHA_ACTUALIZA" TIMESTAMP,
    "POSTULA_USUARIO_ACTUALIZA" VARCHAR(45),
    "POSTULA_HOST_ACTUALIZA" VARCHAR(45),
    CONSTRAINT postulante_correo_key UNIQUE ("CORREO"),
    CONSTRAINT postulante_dni_key UNIQUE ("DNI")
);

--CREACION TABLA COMPETENCIA
CREATE TABLE competencia (
    "ID_COMPETENCIA" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NOMBRE_COMPETENCIA" VARCHAR(100) NOT NULL,
    "PESO_COMPETENCIA" NUMERIC(6,2) NOT NULL,
    "DESCRIPCION" TEXT NOT NULL,
    "FECHA_DISPONIBILIDAD" DATE,
    "FECHA_INICIO" DATE,
    "FECHA_FIN" DATE,
    "HORA_INICIO" TIME WITHOUT TIME ZONE,
    "ORDEN_COMPETENCIA" INTEGER NOT NULL,
    "ESTADO_COMPETENCIA" VARCHAR(20) DEFAULT 'Pendiente',
    "DEPENDENCIA_COMPETENCIA" INTEGER,
    "ID_ETAPA" INTEGER,
    "ID_PROCESO" INTEGER,
    "POSTULA_ACTIVO" BOOLEAN NOT NULL DEFAULT true,
    "POSTULA_FECHA_CREACION" TIMESTAMP NOT NULL DEFAULT now(),
    "POSTULA_USUARIO_CREACION" VARCHAR(45) NOT NULL,
    "POSTULA_HOST_CREACION" VARCHAR(45) NOT NULL,
    "POSTULA_FECHA_ACTUALIZA" TIMESTAMP,
    "POSTULA_USUARIO_ACTUALIZA" VARCHAR(45),
    "POSTULA_HOST_ACTUALIZA" VARCHAR(45)
);

--CREACION TABLA PREGUNTA
CREATE TABLE pregunta (
    "ID_PREGUNTA" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "TIPO_EVALUACION" VARCHAR(50),
    "GRUPO" VARCHAR(50),
    "TEXTO_TITULO" TEXT,
    "TEXTO_SUPERIOR" TEXT,
    "TEXTO_IMAGEN" TEXT,
    "TEXTO_INFERIOR" TEXT,
    "ID_ARCHIVO_CARGA" INTEGER,
    "PREGUNTA" TEXT NOT NULL,
    "OPCION_A" TEXT NOT NULL,
    "OPCION_B" TEXT NOT NULL,
    "OPCION_C" TEXT NOT NULL,
    "OPCION_D" TEXT NOT NULL,
    "RESPUESTA_CORRECTA" CHARACTER(1) NOT NULL,
    "ID_COMPETENCIA" INTEGER NOT NULL,
    "POSTULA_ACTIVO" BOOLEAN NOT NULL DEFAULT true,
    "POSTULA_FECHA_CREACION" TIMESTAMP NOT NULL DEFAULT now(),
    "POSTULA_USUARIO_CREACION" VARCHAR(45) NOT NULL,
    "POSTULA_HOST_CREACION" VARCHAR(45) NOT NULL,
    "POSTULA_FECHA_ACTUALIZA" TIMESTAMP,
    "POSTULA_USUARIO_ACTUALIZA" VARCHAR(45),
    "POSTULA_HOST_ACTUALIZA" VARCHAR(45),
    CONSTRAINT fk_competencia_pregunta FOREIGN KEY ("ID_COMPETENCIA")
        REFERENCES competencia ("ID_COMPETENCIA") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

--CREACION TABLA CRITERIO_EVALUACION
CREATE TABLE criterio_evaluacion (
    "ID_CRITERIO" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "ID_COMPETENCIA" INTEGER NOT NULL,
    "PUNTUACION_MAXIMA" NUMERIC(6,2) NOT NULL,
    "PESO" NUMERIC(6,2) NOT NULL,
    "NUMERO_PREGUNTAS" INTEGER NOT NULL,
    "PUNTAJE_POR_PREGUNTA" NUMERIC(6,2) NOT NULL,
    "PUNTAJE_MAXIMO" NUMERIC(6,2) NOT NULL,
    "PUNTAJE_MINIMO_APROBATORIO" NUMERIC(6,2) NOT NULL,
    "TIEMPO_POR_PREGUNTA" NUMERIC(5,2) NOT NULL,
    "TIEMPO_LIMITE" TIME WITHOUT TIME ZONE,
    "POSTULA_ACTIVO" BOOLEAN NOT NULL DEFAULT true,
    "POSTULA_FECHA_CREACION" TIMESTAMP NOT NULL DEFAULT now(),
    "POSTULA_USUARIO_CREACION" VARCHAR(45) NOT NULL,
    "POSTULA_HOST_CREACION" VARCHAR(45) NOT NULL,
    "POSTULA_FECHA_ACTUALIZA" TIMESTAMP,
    "POSTULA_USUARIO_ACTUALIZA" VARCHAR(45),
    "POSTULA_HOST_ACTUALIZA" VARCHAR(45),
    CONSTRAINT fk_competencia FOREIGN KEY ("ID_COMPETENCIA")
        REFERENCES competencia ("ID_COMPETENCIA") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

--CREACION TABLA ESTADO_COMPETENCIA
CREATE TABLE estado_competencia (
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "ID_COMPETENCIA" INTEGER NOT NULL,
    "ID_POSTULANTE" INTEGER NOT NULL,
    "ESTADO" VARCHAR(1) NOT NULL,
    "TIEMPO_INICIADO" TIMESTAMP WITHOUT TIME ZONE,
    "TIEMPO_FINALIZADO" TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT fk_competencia FOREIGN KEY ("ID_COMPETENCIA")
        REFERENCES competencia ("ID_COMPETENCIA") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT fk_id_postulante FOREIGN KEY ("ID_POSTULANTE")
        REFERENCES postulante ("ID_POSTULANTE") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);


--CREACION TABLA EXAMEN_GENERADO
CREATE TABLE examen_generado (
    "ID_EXAMEN_GENERADO" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "ID_POSTULANTE" INTEGER,
    "ID_PREGUNTA" INTEGER,
    "ORDEN_PREGUNTA" INTEGER,
    "RESPUESTA_SELECCIONADA" CHARACTER(1),
    "TIEMPO_RESPUESTA" TIMESTAMP WITHOUT TIME ZONE,
    "COMPLETADO" BOOLEAN DEFAULT false,
    "ID_COMPETENCIA" INTEGER,
    "POSTULA_ACTIVO" BOOLEAN DEFAULT true,
    "POSTULA_FECHA_CREACION" TIMESTAMP DEFAULT now(),
    "POSTULA_USUARIO_CREACION" VARCHAR(45),
    "POSTULA_HOST_CREACION" VARCHAR(45),
    "POSTULA_FECHA_ACTUALIZA" TIMESTAMP,
    "POSTULA_USUARIO_ACTUALIZA" VARCHAR(45),
    "POSTULA_HOST_ACTUALIZA" VARCHAR(45),
    CONSTRAINT fk_id_postulante FOREIGN KEY ("ID_POSTULANTE")
        REFERENCES postulante ("ID_POSTULANTE") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_id_pregunta FOREIGN KEY ("ID_PREGUNTA")
        REFERENCES pregunta ("ID_PREGUNTA") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);


-- PROCEDURE: actualizar_respuesta
CREATE OR REPLACE PROCEDURE actualizar_respuesta(
	IN p_respuesta_seleccionada character,
	IN p_id_postulante integer,
	IN p_id_pregunta integer)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
    UPDATE EXAMEN_GENERADO
    SET 
        "RESPUESTA_SELECCIONADA" = p_respuesta_seleccionada,
        "COMPLETADO" = TRUE,
        "TIEMPO_RESPUESTA" = CURRENT_TIMESTAMP AT TIME ZONE 'America/Lima'
    WHERE 
        "ID_POSTULANTE" = p_id_postulante 
        AND "ID_PREGUNTA" = p_id_pregunta;
    COMMIT;
END;
$BODY$;


-- PROCEDURE: generar_examen_aleatorio_competencia
CREATE OR REPLACE PROCEDURE generar_examen_aleatorio_competencia(
    IN p_id_postulante integer,
    IN p_numero_preguntas integer,
    IN p_id_competencia integer)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
    grupos RECORD;
BEGIN
    IF p_id_competencia = 1 THEN
        -- Seleccionar grupos de preguntas (5 preguntas por grupo)
        FOR grupos IN 
            SELECT "GRUPO" 
            FROM pregunta 
            WHERE "ID_COMPETENCIA" = p_id_competencia 
              AND "GRUPO" IS NOT NULL
            GROUP BY "GRUPO" 
            ORDER BY RANDOM() 
            LIMIT p_numero_preguntas / 5
        LOOP
            -- Insertar la pregunta con TEXTO_SUPERIOR
            INSERT INTO EXAMEN_GENERADO ("ID_POSTULANTE", "ID_PREGUNTA", "ORDEN_PREGUNTA", "ID_COMPETENCIA", "POSTULA_ACTIVO", "POSTULA_FECHA_CREACION", "POSTULA_USUARIO_CREACION", "POSTULA_HOST_CREACION")
            SELECT p_id_postulante, "ID_PREGUNTA", NULL, p_id_competencia, true, CURRENT_TIMESTAMP, 'admin', 'localhost'
            FROM pregunta
            WHERE "GRUPO" = grupos."GRUPO"
              AND "TEXTO_SUPERIOR" IS NOT NULL
            LIMIT 1;  -- Solo la primera pregunta (con TEXTO_SUPERIOR)

            -- Insertar las otras 4 preguntas de forma aleatoria
            INSERT INTO EXAMEN_GENERADO ("ID_POSTULANTE", "ID_PREGUNTA", "ORDEN_PREGUNTA", "ID_COMPETENCIA", "POSTULA_ACTIVO", "POSTULA_FECHA_CREACION", "POSTULA_USUARIO_CREACION", "POSTULA_HOST_CREACION")
            SELECT p_id_postulante, "ID_PREGUNTA", NULL, p_id_competencia, true, CURRENT_TIMESTAMP, 'admin', 'localhost'
            FROM pregunta
            WHERE "GRUPO" = grupos."GRUPO"
              AND "TEXTO_SUPERIOR" IS NULL  -- Solo las preguntas restantes
            ORDER BY RANDOM()
            LIMIT 4;  -- Solo las 4 preguntas restantes
        END LOOP;
    ELSE
        -- Para otras competencias, excluir las preguntas que tienen un valor en el campo 'GRUPO'
        INSERT INTO EXAMEN_GENERADO ("ID_POSTULANTE", "ID_PREGUNTA", "ORDEN_PREGUNTA", "ID_COMPETENCIA", "POSTULA_ACTIVO", "POSTULA_FECHA_CREACION", "POSTULA_USUARIO_CREACION", "POSTULA_HOST_CREACION")
        SELECT p_id_postulante, q."ID_PREGUNTA", NULL, p_id_competencia, true, CURRENT_TIMESTAMP, 'admin', 'localhost'
        FROM (
            SELECT "ID_PREGUNTA"
            FROM PREGUNTA
            WHERE "ID_COMPETENCIA" = p_id_competencia
              AND "GRUPO" IS NULL  -- Excluir preguntas agrupadas
            ORDER BY RANDOM()
            LIMIT p_numero_preguntas
        ) q;
    END IF;

    -- Actualizar el orden de las preguntas generadas
    WITH preguntas_ordenadas AS (
        SELECT
            "ID_EXAMEN_GENERADO",
            "ID_POSTULANTE",
            "ID_PREGUNTA",
            ROW_NUMBER() OVER (PARTITION BY "ID_POSTULANTE" ORDER BY "ID_EXAMEN_GENERADO") AS nuevo_orden
        FROM EXAMEN_GENERADO
        WHERE "ID_POSTULANTE" = p_id_postulante
    )
    UPDATE EXAMEN_GENERADO eg
    SET "ORDEN_PREGUNTA" = po.nuevo_orden
    FROM preguntas_ordenadas po
    WHERE eg."ID_EXAMEN_GENERADO" = po."ID_EXAMEN_GENERADO";

END;
$BODY$;